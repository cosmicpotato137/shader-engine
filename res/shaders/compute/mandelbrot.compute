#version 460 core
layout(local_size_x = 8, local_size_y = 8) in;

layout(rgba32f, binding = 0) uniform image2D imageOut;
uniform vec2 center;
uniform float scale;
uniform uint max_iterations;
uniform vec3 color;

vec2 cmult(vec2 z1, vec2 z2) {
  return vec2(z1.x*z2.x - z1.y*z2.y, z1.x*z2.y + z1.y*z2.x);
}

void main() {
  ivec2 gidx = ivec2(gl_GlobalInvocationID.xy);
  vec2 size = imageSize(imageOut);
  vec2 uv = (2.0*gidx - size) / size.y; 

  vec2 c = center + scale * uv;
  vec2 z = vec2(0, 0);

  uint iter_diverge = max_iterations;
  for(uint i = 0; i < max_iterations; ++i) {
    z = cmult(z, z) + c;
    if(length(z) > 1000) {
      iter_diverge = i;
      break;
    }
  }
  float brightness = iter_diverge / float(max_iterations);

  imageStore(imageOut, gidx, vec4(color * brightness, 1.0f));
}